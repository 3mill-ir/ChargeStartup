//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AgencyBusinessLayer.IISChargeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChargeTable", Namespace="http://schemas.datacontract.org/2004/07/ChargeServiceContracts")]
    [System.SerializableAttribute()]
    public partial class ChargeTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable GetChargeTableField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable GetChargeTable {
            get {
                return this.GetChargeTableField;
            }
            set {
                if ((object.ReferenceEquals(this.GetChargeTableField, value) != true)) {
                    this.GetChargeTableField = value;
                    this.RaisePropertyChanged("GetChargeTable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.thatindigogirl.com/samples/2006/06", ConfigurationName="IISChargeService.IAgencyService")]
    public interface IAgencyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyValidator", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyValidatorRespo" +
            "nse")]
        long AgencyValidator(long username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyValidator", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyValidatorRespo" +
            "nse")]
        System.Threading.Tasks.Task<long> AgencyValidatorAsync(long username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyLogOut", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyLogOutResponse" +
            "")]
        void AgencyLogOut(long username, long sessiontoken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyLogOut", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyLogOutResponse" +
            "")]
        System.Threading.Tasks.Task AgencyLogOutAsync(long username, long sessiontoken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/CheckAgencyCredit", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/CheckAgencyCreditRes" +
            "ponse")]
        string CheckAgencyCredit(long username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/CheckAgencyCredit", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/CheckAgencyCreditRes" +
            "ponse")]
        System.Threading.Tasks.Task<string> CheckAgencyCreditAsync(long username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyChangePassword" +
            "", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyChangePassword" +
            "Response")]
        bool AgencyChangePassword(long username, string oldpassword, string newpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyChangePassword" +
            "", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/AgencyChangePassword" +
            "Response")]
        System.Threading.Tasks.Task<bool> AgencyChangePasswordAsync(long username, string oldpassword, string newpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestCharge", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestChargeRespons" +
            "e")]
        AgencyBusinessLayer.IISChargeService.ChargeTable RequestCharge(string Operator, string Category, int amountOfcharge, long AgencyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestCharge", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestChargeRespons" +
            "e")]
        System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> RequestChargeAsync(string Operator, string Category, int amountOfcharge, long AgencyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestDailyReport", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestDailyReportRe" +
            "sponse")]
        AgencyBusinessLayer.IISChargeService.ChargeTable RequestDailyReport(long AgencyID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestDailyReport", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestDailyReportRe" +
            "sponse")]
        System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> RequestDailyReportAsync(long AgencyID, System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestMonthlyReport" +
            "", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestMonthlyReport" +
            "Response")]
        AgencyBusinessLayer.IISChargeService.ChargeTable RequestMonthlyReport(long AgencyID, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestMonthlyReport" +
            "", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/RequestMonthlyReport" +
            "Response")]
        System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> RequestMonthlyReportAsync(long AgencyID, int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/NumberOfAgencySoldCh" +
            "arge", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/NumberOfAgencySoldCh" +
            "argeResponse")]
        AgencyBusinessLayer.IISChargeService.ChargeTable NumberOfAgencySoldCharge(System.DateTime BeginDate, System.DateTime EndDate, long AgencyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/NumberOfAgencySoldCh" +
            "arge", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/NumberOfAgencySoldCh" +
            "argeResponse")]
        System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> NumberOfAgencySoldChargeAsync(System.DateTime BeginDate, System.DateTime EndDate, long AgencyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/DayBase_AgencySoldDa" +
            "ily", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/DayBase_AgencySoldDa" +
            "ilyResponse")]
        AgencyBusinessLayer.IISChargeService.ChargeTable DayBase_AgencySoldDaily(System.DateTime BeginDate, System.DateTime EndDate, long AgencyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/DayBase_AgencySoldDa" +
            "ily", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/DayBase_AgencySoldDa" +
            "ilyResponse")]
        System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> DayBase_AgencySoldDailyAsync(System.DateTime BeginDate, System.DateTime EndDate, long AgencyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/TimeBase_AgencySoldD" +
            "aily", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/TimeBase_AgencySoldD" +
            "ailyResponse")]
        AgencyBusinessLayer.IISChargeService.ChargeTable TimeBase_AgencySoldDaily(System.DateTime Date, long AgencyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/TimeBase_AgencySoldD" +
            "aily", ReplyAction="http://www.thatindigogirl.com/samples/2006/06/IAgencyService/TimeBase_AgencySoldD" +
            "ailyResponse")]
        System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> TimeBase_AgencySoldDailyAsync(System.DateTime Date, long AgencyID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAgencyServiceChannel : AgencyBusinessLayer.IISChargeService.IAgencyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AgencyServiceClient : System.ServiceModel.ClientBase<AgencyBusinessLayer.IISChargeService.IAgencyService>, AgencyBusinessLayer.IISChargeService.IAgencyService {
        
        public AgencyServiceClient() {
        }
        
        public AgencyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AgencyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgencyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgencyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long AgencyValidator(long username, string password) {
            return base.Channel.AgencyValidator(username, password);
        }
        
        public System.Threading.Tasks.Task<long> AgencyValidatorAsync(long username, string password) {
            return base.Channel.AgencyValidatorAsync(username, password);
        }
        
        public void AgencyLogOut(long username, long sessiontoken) {
            base.Channel.AgencyLogOut(username, sessiontoken);
        }
        
        public System.Threading.Tasks.Task AgencyLogOutAsync(long username, long sessiontoken) {
            return base.Channel.AgencyLogOutAsync(username, sessiontoken);
        }
        
        public string CheckAgencyCredit(long username) {
            return base.Channel.CheckAgencyCredit(username);
        }
        
        public System.Threading.Tasks.Task<string> CheckAgencyCreditAsync(long username) {
            return base.Channel.CheckAgencyCreditAsync(username);
        }
        
        public bool AgencyChangePassword(long username, string oldpassword, string newpassword) {
            return base.Channel.AgencyChangePassword(username, oldpassword, newpassword);
        }
        
        public System.Threading.Tasks.Task<bool> AgencyChangePasswordAsync(long username, string oldpassword, string newpassword) {
            return base.Channel.AgencyChangePasswordAsync(username, oldpassword, newpassword);
        }
        
        public AgencyBusinessLayer.IISChargeService.ChargeTable RequestCharge(string Operator, string Category, int amountOfcharge, long AgencyID) {
            return base.Channel.RequestCharge(Operator, Category, amountOfcharge, AgencyID);
        }
        
        public System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> RequestChargeAsync(string Operator, string Category, int amountOfcharge, long AgencyID) {
            return base.Channel.RequestChargeAsync(Operator, Category, amountOfcharge, AgencyID);
        }
        
        public AgencyBusinessLayer.IISChargeService.ChargeTable RequestDailyReport(long AgencyID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.RequestDailyReport(AgencyID, FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> RequestDailyReportAsync(long AgencyID, System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.RequestDailyReportAsync(AgencyID, FromDate, ToDate);
        }
        
        public AgencyBusinessLayer.IISChargeService.ChargeTable RequestMonthlyReport(long AgencyID, int year) {
            return base.Channel.RequestMonthlyReport(AgencyID, year);
        }
        
        public System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> RequestMonthlyReportAsync(long AgencyID, int year) {
            return base.Channel.RequestMonthlyReportAsync(AgencyID, year);
        }
        
        public AgencyBusinessLayer.IISChargeService.ChargeTable NumberOfAgencySoldCharge(System.DateTime BeginDate, System.DateTime EndDate, long AgencyID) {
            return base.Channel.NumberOfAgencySoldCharge(BeginDate, EndDate, AgencyID);
        }
        
        public System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> NumberOfAgencySoldChargeAsync(System.DateTime BeginDate, System.DateTime EndDate, long AgencyID) {
            return base.Channel.NumberOfAgencySoldChargeAsync(BeginDate, EndDate, AgencyID);
        }
        
        public AgencyBusinessLayer.IISChargeService.ChargeTable DayBase_AgencySoldDaily(System.DateTime BeginDate, System.DateTime EndDate, long AgencyID) {
            return base.Channel.DayBase_AgencySoldDaily(BeginDate, EndDate, AgencyID);
        }
        
        public System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> DayBase_AgencySoldDailyAsync(System.DateTime BeginDate, System.DateTime EndDate, long AgencyID) {
            return base.Channel.DayBase_AgencySoldDailyAsync(BeginDate, EndDate, AgencyID);
        }
        
        public AgencyBusinessLayer.IISChargeService.ChargeTable TimeBase_AgencySoldDaily(System.DateTime Date, long AgencyID) {
            return base.Channel.TimeBase_AgencySoldDaily(Date, AgencyID);
        }
        
        public System.Threading.Tasks.Task<AgencyBusinessLayer.IISChargeService.ChargeTable> TimeBase_AgencySoldDailyAsync(System.DateTime Date, long AgencyID) {
            return base.Channel.TimeBase_AgencySoldDailyAsync(Date, AgencyID);
        }
    }
}
